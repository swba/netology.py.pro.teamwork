import vk_api
from vk_api.exceptions import ApiError
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id
from typing import Dict, List, Optional, Tuple, Any
from datetime import date, datetime
import logging
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class VKHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"""

    SEARCH_WEIGHTS = {
        'age': 0.4,
        'city': 0.3,
        'interests': 0.2,
        'friends': 0.1
    }

    def __init__(self, token: str, db=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.token = token
        self.db = db

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ VK API
            self.vk_session = vk_api.VkApi(token=token)
            self.vk = self.vk_session.get_api()  # –û—Å–Ω–æ–≤–Ω–æ–π API –∫–ª–∏–µ–Ω—Ç
            logger.info("VK API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK API: {e}")
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK API: {e}")

    def get_user_info(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            response = self.vk.users.get(
                user_ids=user_id,
                fields='sex,city,bdate,interests,music,books,groups'
            )

            if not response or not isinstance(response, list):
                return None

            user_data = response[0]

            return {
                'id': user_id,
                'first_name': user_data.get('first_name', ''),
                'last_name': user_data.get('last_name', ''),
                'sex': user_data.get('sex', 0),
                'city': self._parse_city(user_data.get('city')),
                'age': self._calculate_age(user_data.get('bdate')),
                'interests': self._get_interests(user_data),
                'bdate': user_data.get('bdate', '')
            }

        except ApiError as e:
            logger.error(f"API error getting user info: {e}")
            return None
        except Exception as e:
            logger.error(f"Error getting user info: {e}")
            return None

    def search_users(self, search_params: Dict) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        try:
            params = {
                'count': 1000,
                'has_photo': 1,
                'fields': 'city,photo_max_orig,sex,bdate,interests',
                'age_from': search_params.get('age_from', 18),
                'age_to': search_params.get('age_to', 35),
                'sex': search_params.get('sex', 1),
                'city': search_params.get('city_id', 0),
                'status': 6  # –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ
            }

            # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            params = {k: v for k, v in params.items() if v is not None}

            response = self.vk.users.search(**params)

            if not response or 'items' not in response:
                return []

            return response['items']

        except ApiError as e:
            logger.error(f"API search error: {e}")
            if e.code == 6:  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
                time.sleep(0.5)
                return self.search_users(search_params)
            return []
        except Exception as e:
            logger.error(f"Search error: {e}")
            return []

    def get_photos(self, user_id: int, count: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            all_photos = []

            # 1. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è (wall)
            try:
                profile_photos = self.vk.photos.get(
                    owner_id=user_id,
                    album_id='wall',
                    extended=1,
                    count=100,
                    photo_sizes=1
                ).get('items', [])
                all_photos.extend(profile_photos)
            except ApiError as e:
                logger.warning(f"Couldn't get wall photos: {e}")

            # 2. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (profile)
            try:
                profile_photos = self.vk.photos.get(
                    owner_id=user_id,
                    album_id='profile',
                    extended=1,
                    count=100,
                    photo_sizes=1
                ).get('items', [])
                all_photos.extend(profile_photos)
            except ApiError as e:
                logger.warning(f"Couldn't get profile photos: {e}")

            # 3. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—á–µ–Ω
            try:
                tagged_photos = self.vk.photos.getUserPhotos(
                    user_id=user_id,
                    extended=1,
                    count=100,
                    photo_sizes=1
                ).get('items', [])
                all_photos.extend(tagged_photos)
            except ApiError as e:
                logger.warning(f"Couldn't get tagged photos: {e}")

            # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ
            if not all_photos:
                try:
                    all_photos = self.vk.photos.getAll(
                        owner_id=user_id,
                        extended=1,
                        count=100,
                        photo_sizes=1
                    ).get('items', [])
                except ApiError as e:
                    logger.error(f"Couldn't get any photos: {e}")
                    return []

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø
            all_photos.sort(key=lambda x: x.get('likes', {}).get('count', 0), reverse=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = []
            for photo in all_photos[:count]:
                # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                sizes = photo.get('sizes', [])
                if sizes:
                    max_size = max(sizes, key=lambda s: s.get('width', 0) * s.get('height', 0))
                    photo_url = max_size.get('url', '')
                else:
                    photo_url = ''

                result.append({
                    'id': photo.get('id'),
                    'owner_id': photo.get('owner_id'),
                    'url': photo_url,
                    'likes': photo.get('likes', {}).get('count', 0)
                })

            return result

        except Exception as e:
            logger.error(f"Photos error: {e}")
            return []

    def like_photo(self, photo_id: int, owner_id: int) -> bool:
        """–°—Ç–∞–≤–∏—Ç –ª–∞–π–∫ –Ω–∞ —Ñ–æ—Ç–æ"""
        try:
            self.vk.likes.add(
                type='photo',
                owner_id=owner_id,
                item_id=photo_id
            )
            return True
        except ApiError as e:
            logger.error(f"API like error: {e}")
            return False
        except Exception as e:
            logger.error(f"Like error: {e}")
            return False

    def create_keyboard(self, user_id: int, photo_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        keyboard = VkKeyboard(inline=True)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        keyboard.add_button(
            label="‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            color=VkKeyboardColor.POSITIVE,
            payload={
                "type": "add_fav",
                "user_id": user_id
            }
        )

        # –ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫–∞ —Ñ–æ—Ç–æ
        keyboard.add_button(
            label="üëç –õ–∞–π–∫",
            color=VkKeyboardColor.SECONDARY,
            payload={
                "type": "like",
                "photo_id": photo_id,
                "owner_id": user_id
            }
        )

        keyboard.add_line()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞

        # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.add_button(
            label="‚û°Ô∏è –î–∞–ª—å—à–µ",
            color=VkKeyboardColor.PRIMARY,
            payload={"type": "next"}
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ß–°
        keyboard.add_button(
            label="üö´ –ß–°",
            color=VkKeyboardColor.NEGATIVE,
            payload={
                "type": "block",
                "user_id": user_id
            }
        )

        return keyboard.get_keyboard()

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _parse_city(self, city_data: Any) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞"""
        if not city_data:
            return {'id': 0, 'title': '–ù–µ —É–∫–∞–∑–∞–Ω'}
        if isinstance(city_data, str):
            return {'id': 0, 'title': city_data}
        if isinstance(city_data, dict):
            return {
                'id': city_data.get('id', 0),
                'title': city_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω')
            }
        return {'id': 0, 'title': '–ù–µ —É–∫–∞–∑–∞–Ω'}

    def _calculate_age(self, bdate: Optional[str]) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not bdate or len(bdate.split('.')) < 3:
            return 25  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        try:
            birth_year = int(bdate.split('.')[2])
            return datetime.now().year - birth_year
        except (ValueError, IndexError):
            return 25

    def _get_interests(self, user_data: Dict) -> Dict[str, List[str]]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        return {
            'music': user_data.get('music', '').lower().split(','),
            'books': user_data.get('books', '').lower().split(','),
            'interests': user_data.get('interests', '').lower().split(','),
            'groups': self._get_group_names(user_data.get('groups', []))
        }

    def _get_group_names(self, group_ids: List[int]) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –ø–æ –∏—Ö ID"""
        if not group_ids:
            return []

        try:
            groups = self.vk.groups.getById(group_ids=group_ids)
            return [g['name'].lower() for g in groups]
        except ApiError:
            return []
