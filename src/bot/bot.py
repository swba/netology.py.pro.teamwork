import json
import time
import logging
from typing import Dict, Optional

from environs import env
from vk_api import VkApi
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id

from src.database import Database
from src.vk_client import VkClient


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class Bot:

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–æ–≤"""
        self._check_env_vars()

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK API
            self.vk_session = VkApi(token=env('VK_BOT_TOKEN'))
            self.vk = self.vk_session.get_api()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK API
            self._check_vk_connection()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LongPoll
            self.longpoll = VkLongPoll(self.vk_session)

            logger.info("‚úÖ LongPoll –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db = Database()
            logger.info(f"üõ¢Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL: {env('DB_NAME')}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ VK
            self.vk_client = VkClient(env('VK_API_TOKEN'))

            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.user_states = {}

        except Exception as e:
            logger.critical(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise

    def _check_vk_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK API"""
        try:
            group_info = self.vk.groups.getById()
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ: {group_info[0]['name']}")
        except Exception as e:
            logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK API: {e}")
            raise RuntimeError(f"VK API connection failed: {e}")

    @staticmethod
    def _check_env_vars():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        required_vars = ['VK_BOT_TOKEN', 'VK_API_TOKEN']
        missing = [var for var in required_vars if not env(var)]

        if missing:
            logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")

            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª —Å —à–∞–±–ª–æ–Ω–æ–º
            with open('.env', 'w') as f:
                for var in required_vars:
                    f.write(f"{var}=\n")

            raise ValueError(
                "–§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."
            )

    def run(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞...")

        try:
            while True:
                try:
                    for event in self.longpoll.listen():
                        try:
                            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                                self._handle_event(event)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                            time.sleep(1)

                except KeyboardInterrupt:
                    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ LongPoll: {e}")
                    time.sleep(10)

        finally:
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
            logger.info("–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

    def _handle_event(self, event) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ"""
        try:
            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                user_id = event.user_id
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ payload –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    payload = getattr(event, 'payload', None)
                    if payload:
                        try:
                            payload_data = json.loads(payload)
                            self._handle_payload(user_id, payload_data)
                        except json.JSONDecodeError:
                            self._handle_text(user_id, event.text.lower())
                    else:
                        self._handle_text(user_id, event.text.lower())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}", exc_info=True)
                    self._send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)

    def _handle_payload(self, user_id: int, payload: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
            payload: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è

        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π:
        - add_fav: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        - like: –ª–∞–π–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        - next: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - block: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ payload
            if not isinstance(payload, dict):
                logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload: {payload}")
                self._send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è")
                return

            action = payload.get('type')
            if not action:
                logger.error(f"Payload –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {payload}")
                self._send_message(user_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
            if action == "add_fav":
                if 'user_id' not in payload:
                    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –≤ add_fav: {payload}")
                    self._send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                    return

                fav_id = payload['user_id']
                if self.db.add(user_id, fav_id):
                    self._send_message(user_id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
                else:
                    self._send_message(user_id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")

            elif action == "like":
                if 'photo_id' not in payload:
                    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç photo_id –≤ like: {payload}")
                    self._send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è")
                    return

                photo_id = payload['photo_id']
                owner_id = payload.get('owner_id', payload.get('user_id'))

                if not owner_id:
                    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç owner_id –≤ like: {payload}")
                    self._send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –≤–ª–∞–¥–µ–ª–µ—Ü —Ñ–æ—Ç–æ")
                    return

                if self.vk_client.like_photo(photo_id, owner_id):
                    self._send_message(user_id, "‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!")
                else:
                    self._send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫")

            elif action == "next":
                self._show_next_user(user_id)

            elif action == "block":
                if 'user_id' not in payload:
                    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –≤ block: {payload}")
                    self._send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                    return

                block_id = payload['user_id']
                if self.db.add_to_blacklist(user_id, block_id):
                    self._send_message(user_id, "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°")
                    self._show_next_user(user_id)
                else:
                    self._send_message(user_id, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ß–°")

            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: {action}")
                self._send_message(user_id, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

        except KeyError as e:
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ payload: {e}")
            self._send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ payload: {e}", exc_info=True)
            self._send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è")

    def _handle_text(self, user_id: int, text: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if text in ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
                self._send_message(
                    user_id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n"
                    "üîç –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π '–ø–æ–∏—Å–∫'\n"
                    "‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ'",
                    self._main_keyboard()
                )
            elif text == '–ø–æ–∏—Å–∫':
                self._start_search(user_id)
            elif text == '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
                self._show_favorites(user_id)
            else:
                self._send_message(
                    user_id,
                    "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "üîç '–ø–æ–∏—Å–∫' - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫\n"
                    "‚≠ê '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ' - –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ",
                    self._main_keyboard()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            self._send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def _start_search(self, user_id: int) -> None:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = self.vk_client.get_user(user_id)
            if not user_info:
                self._send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
            age = user_info.age or 25
            search_params = {
                'sex': 1 if user_info.sex == 2 else 2,
                'city': user_info.city.id if user_info.city else None,
                'age_from': max(age - 5, 18),
                'age_to': age + 5,
                'has_photo': 1
            }

            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # todo: –ù–µ —Ä–∞–∑—É–º–Ω–µ–µ –ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–µ—à –≤ –ø–∞–º—è—Ç–∏, –∞ –Ω–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö? –ö–∞–∫ –µ–≥–æ —ç–∫—Å–ø–∏—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –ë–î?
            users = self.db.get_cached_results(user_id, search_params)
            if users is None:
                # todo: –¥–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
                users = self.vk_client.search_users(exclude=[user_id], **search_params) or []
                if users:
                    self.db.cache_results(user_id, search_params, users)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            users = [
                u for u in users
                if not self.db.check_blacklist(user_id, u.get('id'))
                   and u.get('id') not in self.db.get_favorites(user_id)
            ]

            if not users:
                self._send_message(user_id, "üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.user_states[user_id] = {
                'users': users,
                'index': 0
            }

            self._show_user(user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            self._send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

    def _show_user(self, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_id not in self.user_states:
                self._send_message(user_id, "üîç –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π '–ø–æ–∏—Å–∫'")
                return

            current = self.user_states[user_id]
            if current['index'] >= len(current['users']):
                self._send_message(user_id, "üòî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
                return

            user = current['users'][current['index']]
            photos = self.vk_client.get_user_photos(user['id'], top=3)

            if not photos:
                self._show_next_user(user_id)
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            profile_link = f"https://vk.com/id{user['id']}"
            message = (
                f"üë§ {user.get('first_name', '')} {user.get('last_name', '')}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user.get('city', {}).get('title', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {profile_link}"
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–æ—Ç–æ)
            attachments = [f"photo{photo.owner_id}_{photo.id}" for photo in photos]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self.vk.create_keyboard(user['id'], photos[0].id)

            self._send_message(
                user_id=user_id,
                message=message,
                keyboard=keyboard,
                attachment=",".join(attachments)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            self._send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

    def _show_next_user(self, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_states:
            self.user_states[user_id]['index'] += 1
            self._show_user(user_id)
        else:
            self._send_message(user_id, "üîç –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥–æ–π '–ø–æ–∏—Å–∫'")

    def _show_favorites(self, user_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            favorites = self.db.get_favorites(user_id)
            if not favorites:
                self._send_message(user_id, "‚≠ê –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç")
                return

            message = "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ:\n" + "\n".join(
                f"{i + 1}. vk.com/id{uid}" for i, uid in enumerate(favorites[:10]))

            self._send_message(user_id, message, self._main_keyboard())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö: {e}")
            self._send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")

    def _send_message(self, user_id: int, message: str,
                      keyboard: Optional[str] = None,
                      attachment: Optional[str] = None) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            params = {
                'user_id': user_id,
                'message': message,
                'random_id': get_random_id(),
                'dont_parse_links': 1
            }

            if keyboard:
                params['keyboard'] = keyboard
            if attachment:
                params['attachment'] = attachment

            self.vk.messages.send(**params)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    @staticmethod
    def _main_keyboard() -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button('–ü–æ–∏—Å–∫', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', color=VkKeyboardColor.POSITIVE)
        return keyboard.get_keyboard()
